{"version":3,"sources":["useAsyncStorage.ts","App.tsx","api.ts"],"names":["useStorage","storageKey","defaultValue","useState","storageItem","setStorageItem","useAsyncStorage","getItem","setItem","useEffect","a","async","data","JSON","parse","getStoredValue","undefined","value","stringify","App","cryptos","setCryptos","prices","setPrices","addCryptoValue","setAddCryptoValue","fetch","join","response","json","getCryptosPrices","then","flex","w","maxWidth","color","m","map","crypto","DISPLAY","EUR","key","flexDirection","alignItems","justifyContent","p","source","uri","IMAGEURL","size","alt","fontWeight","style","CHANGEPCT24HOUR","ActivityIndicator","width","icon","name","onPress","toRemoveCrypto","filter","type","onChangeText","text","console","log","InputRightElement","placeholder","mt"],"mappings":"wNAkCeA,MA/Bf,SACEC,EACAC,GACwB,IAAD,EACeC,mBAASD,GADxB,WAChBE,EADgB,KACHC,EADG,OAEMC,YAAgBL,GAArCM,EAFe,EAEfA,QAASC,EAFM,EAENA,QAoBjB,OAXAC,qBAAU,YACR,mBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEuBH,KAFvB,OAGwB,kBADdK,EAFV,SAGkCP,EAAeQ,KAAKC,MAAMF,IAH5D,8GAOAG,KACC,IAEI,MACWC,IAAhBZ,EAA4BA,EAAcF,EAnB5C,SAA8Be,GAA9B,SAAAP,EAAAC,OAAA,2EAAAD,EAAA,MAEUF,EAAQK,KAAKK,UAAUD,KAFjC,OAGIZ,EAAeY,GAHnB,iHCOa,SAASE,IAAO,IAAD,EACEb,EAAgB,UAAW,CACvD,MACA,MACA,QAJ0B,WACrBc,EADqB,KACZC,EADY,OAMAlB,qBANA,WAMrBmB,EANqB,KAMbC,EANa,OAOgBpB,mBAAS,IAPzB,WAOrBqB,EAPqB,KAOLC,EAPK,KAmB5B,OAJAhB,qBAAU,YCsBoB,SAC9BW,GAD8B,eAAAV,EAAAC,OAAA,kEAAAD,EAAA,MAGPgB,MAAM,+DACoCN,EAAQO,KACrE,KAFwB,eAHE,cAGxBC,EAHwB,yBAQvBA,EAASC,QARc,6DDrB5BC,CAAiBV,GAASW,KAAKR,KAC9B,CAACH,IAGF,kBAAC,qBAAD,KACE,kBAAC,SAAD,CAAQY,KAAM,GACZ,kBAAC,MAAD,CAAKC,EAAE,MAAMC,SAAS,SACpB,kBAAC,UAAD,CAASC,MAAM,cAAcC,EAAG,GAAhC,eAGChB,EAAQiB,KAAI,SAACC,GACZ,IAAM1B,EACJU,GAAUA,EAAOiB,QAAQD,GACrBhB,EAAOiB,QAAQD,GAAQE,IACvB,KACN,OACE,kBAAC,MAAD,CACEC,IAAKH,EACLN,KAAM,EACNU,cAAc,MACdC,WAAW,SACXC,eAAe,gBACfC,EAAG,GAEFjC,GACC,kBAAC,QAAD,CACEkC,OAAQ,CACNC,IAAI,iCAAkCnC,EAAKoC,UAE7CC,KAAK,IACLC,IAAKZ,IAGT,kBAAC,MAAD,CAAKN,KAAM,EAAGU,cAAc,MAAME,eAAe,gBAC/C,kBAAC,OAAD,CAAMO,WAAW,QAAQb,GACvB1B,EAGA,kBAAC,OAAD,CACEwC,MAAO,CACLjB,MAAOvB,EAAKyC,gBAAkB,EAAI,QAAU,QAG7CzC,EAAKyC,gBALR,KAFA,kBAACC,EAAA,EAAD,OAWJ,kBAAC,aAAD,CACEF,MAAO,CAAEG,MAAO,IAChBC,KAAM,kBAAC,OAAD,CAAMC,KAAM,WAClBC,QAAS,kBA1DHC,EA0DsBrB,EAzD1CjB,EAAWD,EAAQwC,QAAO,SAACtB,GAAD,OAAYqB,IAAmBrB,MADtC,IAACqB,SA+Dd,kBAAC,QAAD,CACEE,KAAK,OACL5C,MAAOO,EACPsC,aAAc,SAACC,GACbC,QAAQC,IAAI,QAASF,GACrBtC,EAAkBsC,IAEpBG,kBACE,kBAAC,SAAD,CAAQR,QArEF,WAChBrC,EAAW,GAAD,WAAKD,GAAL,CAAcI,KACxBC,EAAkB,KAmEoBoC,KAAK,UAAjC,OAIFM,YAAY,eACZC,GAAI,S","file":"static/js/app.a3aee2a7.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useAsyncStorage } from \"@react-native-async-storage/async-storage\";\n\nfunction useStorage<T>(\n  storageKey: string,\n  defaultValue: T\n): [T, (val: T) => void] {\n  const [storageItem, setStorageItem] = useState(defaultValue);\n  const { getItem, setItem } = useAsyncStorage(storageKey);\n\n  async function setStoredValue(value: T) {\n    try {\n      await setItem(JSON.stringify(value));\n      setStorageItem(value);\n    } catch (e) {}\n  }\n\n  useEffect(() => {\n    async function getStoredValue() {\n      try {\n        const data = await getItem();\n        if (typeof data === \"string\") setStorageItem(JSON.parse(data));\n      } catch (e) {}\n    }\n\n    getStoredValue();\n  }, []);\n\n  return [\n    storageItem !== undefined ? storageItem : defaultValue,\n    setStoredValue,\n  ];\n}\n\nexport default useStorage;\n","import React, { useEffect, useState } from \"react\";\nimport { ActivityIndicator } from \"react-native\";\nimport {\n  Box,\n  Button,\n  Center,\n  Heading,\n  Icon,\n  IconButton,\n  Image,\n  Input,\n  NativeBaseProvider,\n  Text,\n} from \"native-base\";\nimport useAsyncStorage from \"./useAsyncStorage\";\nimport { ApiResponse, getCryptosPrices } from \"./api\";\n\nexport default function App() {\n  const [cryptos, setCryptos] = useAsyncStorage(\"cryptos\", [\n    \"BTC\",\n    \"ETC\",\n    \"XRP\",\n  ]);\n  const [prices, setPrices] = useState<ApiResponse>();\n  const [addCryptoValue, setAddCryptoValue] = useState(\"\");\n  const removeCrypto = (toRemoveCrypto: string) =>\n    setCryptos(cryptos.filter((crypto) => toRemoveCrypto !== crypto));\n  const addCrypto = () => {\n    setCryptos([...cryptos, addCryptoValue]);\n    setAddCryptoValue(\"\");\n  };\n\n  useEffect(() => {\n    getCryptosPrices(cryptos).then(setPrices);\n  }, [cryptos]);\n\n  return (\n    <NativeBaseProvider>\n      <Center flex={1}>\n        <Box w=\"80%\" maxWidth=\"400px\">\n          <Heading color=\"emerald.400\" m={4}>\n            Crypto list\n          </Heading>\n          {cryptos.map((crypto) => {\n            const data =\n              prices && prices.DISPLAY[crypto]\n                ? prices.DISPLAY[crypto].EUR\n                : null;\n            return (\n              <Box\n                key={crypto}\n                flex={1}\n                flexDirection=\"row\"\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n                p={4}\n              >\n                {data && (\n                  <Image\n                    source={{\n                      uri: `https://www.cryptocompare.com/${data.IMAGEURL}`,\n                    }}\n                    size=\"8\"\n                    alt={crypto}\n                  />\n                )}\n                <Box flex={1} flexDirection=\"row\" justifyContent=\"space-around\">\n                  <Text fontWeight=\"bold\">{crypto}</Text>\n                  {!data ? (\n                    <ActivityIndicator />\n                  ) : (\n                    <Text\n                      style={{\n                        color: data.CHANGEPCT24HOUR > 0 ? \"green\" : \"red\",\n                      }}\n                    >\n                      {data.CHANGEPCT24HOUR}%\n                    </Text>\n                  )}\n                </Box>\n                <IconButton\n                  style={{ width: 50 }}\n                  icon={<Icon name={\"remove\"} />}\n                  onPress={() => removeCrypto(crypto)}\n                />\n              </Box>\n            );\n          })}\n          <Input\n            type=\"text\"\n            value={addCryptoValue}\n            onChangeText={(text: any) => {\n              console.log(\"event\", text);\n              setAddCryptoValue(text);\n            }}\n            InputRightElement={\n              <Button onPress={addCrypto} type=\"submit\">\n                Add\n              </Button>\n            }\n            placeholder=\"Add your own\"\n            mt={4}\n          />\n        </Box>\n      </Center>\n    </NativeBaseProvider>\n  );\n}\n","export type ApiResponse = {\n  DISPLAY: Record<string, Crypto>;\n};\n\nexport interface Crypto {\n  EUR: {\n    TYPE: string;\n    MARKET: string;\n    FROMSYMBOL: string;\n    TOSYMBOL: string;\n    FLAGS: string;\n    PRICE: number;\n    LASTUPDATE: number;\n    MEDIAN: number;\n    LASTVOLUME: number;\n    LASTVOLUMETO: number;\n    LASTTRADEID: string;\n    VOLUMEDAY: number;\n    VOLUMEDAYTO: number;\n    VOLUME24HOUR: number;\n    VOLUME24HOURTO: number;\n    OPENDAY: number;\n    HIGHDAY: number;\n    LOWDAY: number;\n    OPEN24HOUR: number;\n    HIGH24HOUR: number;\n    LOW24HOUR: number;\n    LASTMARKET: string;\n    VOLUMEHOUR: number;\n    VOLUMEHOURTO: number;\n    OPENHOUR: number;\n    HIGHHOUR: number;\n    LOWHOUR: number;\n    TOPTIERVOLUME24HOUR: number;\n    TOPTIERVOLUME24HOURTO: number;\n    CHANGE24HOUR: number;\n    CHANGEPCT24HOUR: number;\n    CHANGEDAY: number;\n    CHANGEPCTDAY: number;\n    CHANGEHOUR: number;\n    CHANGEPCTHOUR: number;\n    CONVERSIONTYPE: string;\n    CONVERSIONSYMBOL: string;\n    SUPPLY: number;\n    MKTCAP: number;\n    MKTCAPPENALTY: number;\n    TOTALVOLUME24H: number;\n    TOTALVOLUME24HTO: number;\n    TOTALTOPTIERVOLUME24H: number;\n    TOTALTOPTIERVOLUME24HTO: number;\n    IMAGEURL: string;\n  };\n}\n\nexport const getCryptosPrices = async (\n  cryptos: string[]\n): Promise<ApiResponse> => {\n  const response = await fetch(\n    `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cryptos.join(\n      \",\"\n    )}&tsyms=EUR`\n  );\n  return response.json();\n};\n"],"sourceRoot":""}